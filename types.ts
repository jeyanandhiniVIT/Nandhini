
export enum UserRole {
  ADMIN = 'admin',
  EMPLOYEE = 'employee',
}

export interface User {
  id: string;
  username: string;
  email: string;
  role: UserRole;
  firstName: string; 
  lastName: string;  
  profilePictureUrl?: string | null; 
  phone?: string;
  department?: string;
  joinDate?: string;
}

// Internal type for storage including password_hash
export type StoredUser = User & { 
  password_hash: string;
  profilePictureUrl?: string | null; 
};


export interface AdminDashboardData {
  totalEmployees: number;
  activeUsers: number;
  presentToday: number; 
  absentToday: number;  
  ongoingProjects: Pick<Project, 'id' | 'name'>[]; 
}

export interface EmployeeDashboardData {
  personalInfo: {
    phone?: string;
    department?: string;
    joinDate?: string;
  };
  quickActions: string[];
}

export enum BillingStatus {
  PENDING = 'pending',
  PAID = 'paid',
  OVERDUE = 'overdue',
}

export type ProjectBillingType = 'hourly' | 'count_based';

export interface Project {
  id: string;
  name: string;
  billingType: ProjectBillingType;
  ratePerHour?: number; 
  countMetricLabel?: string; 
  countDivisor?: number;     
  countMultiplier?: number; 
}

// --- Detailed Billing Calculation Types ---
export interface EmployeeProjectBillingDetail {
  projectId: string;
  projectName: string;
  totalAchievedCount: number;
  metricLabel: string;
  formulaApplied: string;
  calculatedAmountForProject: number;
}

export interface EmployeePeriodBillingSummary { // Effectively replaces AdminBillingCalculationRow
  userId: string;
  userName: string;
  userProfilePictureUrl?: string | null;
  projectDetails: EmployeeProjectBillingDetail[];
  attendanceSummary: { 
    daysPresent: number; 
    daysOnLeave: number; 
  };
  grandTotalAmount: number;
}


export interface BillingRecord {
  id: string;
  userId: string; 
  projectId: string; // For hourly, or as a primary project if a summary record
  projectName?: string; 
  clientName: string; 
  hoursBilled?: number; 
  rateApplied?: number; 
  calculatedAmount: number; // Mandatory for all records
  date: string; // YYYY-MM-DD (e.g., end date of billing period for summary records)
  status: BillingStatus;
  notes?: string; // Explicitly optional
  isCountBased: boolean; 
  
  // Fields for count-based (can be on individual imported or summary)
  achievedCountTotal?: number; 
  countMetricLabelUsed?: string; 
  formulaUsed?: string; 

  // New fields for summary records generated by AdminBillingCalculator
  details?: EmployeeProjectBillingDetail[]; // Project-wise breakdown
  attendanceSummary?: { 
    daysPresent: number; 
    daysOnLeave: number; 
  };
  billingPeriodStartDate?: string; // YYYY-MM-DD
  billingPeriodEndDate?: string; // YYYY-MM-DD
}

// Data for creating a new billing record manually (typically hourly)
export type NewManualBillingRecordData = Pick<BillingRecord, 'userId' | 'projectId' | 'clientName' | 'date' | 'status'> & {
  hoursBilled: number; 
  // rateApplied will be derived from project for new records if not specified
  notes?: string;
};

// Data for creating a billing record via the calculator (summary count-based record) OR for CSV Import of calculated records
export type NewCalculatedBillingRecordData = Pick<BillingRecord, 
  'userId' | 
  'clientName' | 
  'date' | 
  'status' | 
  'calculatedAmount' | // This is the grand total for summary, or pre-calculated amount for CSV
  'isCountBased' 
> & {
  projectId: string; // Could be a general "Period Billing" project ID or first project ID for summary
  projectName?: string; // Added to allow project name to be specified for calculated records
  details?: EmployeeProjectBillingDetail[];
  attendanceSummary?: { daysPresent: number; daysOnLeave: number; };
  billingPeriodStartDate?: string;
  billingPeriodEndDate?: string;
  notes?: string;
  // Optional fields if importing a pre-calculated count-based record
  achievedCountTotal?: number;
  countMetricLabelUsed?: string;
  formulaUsed?: string;
  hoursBilled?: number; // For records that might have tracked hours too
};


// --- Employee Work Report Types ---
export interface ProjectLogItem {
  id: string; 
  projectId: string;
  projectName: string; 
  hoursWorked: number; 
  description: string;
  achievedCount?: number; 
}

export interface DailyWorkReport {
  id: string; 
  userId: string;
  date: string; // YYYY-MM-DD
  projectLogs: ProjectLogItem[];
  submittedAt: string; // ISO timestamp of submission/last update
}

export interface NewDailyWorkReportData {
  userId: string;
  date: string; // YYYY-MM-DD
  projectLogs: ProjectLogItemData[];
}

export type ProjectLogItemData = Omit<ProjectLogItem, 'id' | 'projectName'>;

export interface WorkReportFilters {
  userId?: string;
  projectId?: string;
  startDate?: string;
  endDate?: string;
}


// --- Leave Management Types ---
export enum LeaveType {
  ANNUAL = 'Annual',
  SICK = 'Sick',
  UNPAID = 'Unpaid',
  MATERNITY = 'Maternity',
  PATERNITY = 'Paternity',
  OTHER = 'Other',
}

export enum LeaveStatus {
  PENDING = 'Pending',
  APPROVED = 'Approved',
  REJECTED = 'Rejected',
  CANCELLED = 'Cancelled',
}

export interface LeaveRequest {
  id: string;
  userId: string;
  userFirstName: string; 
  userLastName: string;  
  leaveType: LeaveType;
  startDate: string; // YYYY-MM-DD
  endDate: string; // YYYY-MM-DD
  reason: string;
  status: LeaveStatus;
  requestedAt: string; // ISO timestamp
  adminNotes?: string;
  resolvedAt?: string; // ISO timestamp when admin approved/rejected
}

export type NewLeaveRequestData = Omit<LeaveRequest, 'id' | 'status' | 'requestedAt' | 'adminNotes' | 'resolvedAt' | 'userFirstName' | 'userLastName'>;

// --- Employee Profile Update Type ---
export type EmployeeProfileUpdateData = Pick<User, 'firstName' | 'lastName' | 'email' | 'phone' | 'profilePictureUrl'>;

// Admin updating user details
export type AdminUserUpdateData = Pick<User, 'firstName' | 'lastName' | 'email' | 'phone' | 'department' | 'joinDate' | 'role' | 'profilePictureUrl'>;

// --- Password Change Type ---
export interface ChangePasswordData {
  currentPassword?: string; // Optional for admin reset
  newPasswordA: string;
  newPasswordB: string;
}


// --- Attendance System Types ---
export interface AttendanceRecord {
  id: string; 
  userId: string;
  date: string; // YYYY-MM-DD
  clockInTime: string; // ISO timestamp
  clockOutTime?: string; // ISO timestamp, optional
  totalHours?: number; // In decimal format, calculated on clock-out
  notes?: string; 
}

export interface UserAttendanceStatus {
  isClockedIn: boolean;
  lastClockInTime?: string; 
  currentSessionRecordId?: string; 
}

// --- Internal Messaging System ---
export type MessageRecipient = string | 'ALL_USERS'; // userId or a broadcast type. String for specific userId.

export interface InternalMessage {
  id: string;
  senderId: string; // Can be 'SYSTEM' for automated messages
  senderName: string; // e.g., "Admin Team" or user's name
  senderProfilePictureUrl?: string | null;
  recipientId: MessageRecipient; 
  content: string;
  timestamp: string; // ISO timestamp
  isRead: boolean;
  relatedEntityId?: string; 
  relatedEntityType?: string; 
}